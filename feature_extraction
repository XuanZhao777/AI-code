import cv2
import numpy as np


def feature_extraction(img, feature):
    """
    This function computes defined feature (HoG, SIFT) descriptors of the target image.

    :param img: a height x width x channels matrix,
    :param feature: name of image feature representation.

    :return: a number of grid points x feature_size matrix.
    """

    if feature == 'HoG':
        # HoG parameters
        win_size = (32, 32)
        block_size = (32, 32)
        block_stride = (16, 16)
        cell_size = (16, 16)
        nbins = 9
        deriv_aperture = 1
        win_sigma = 4
        histogram_norm_type = 0
        l2_hys_threshold = 2.0000000000000001e-01
        gamma_correction = 0
        nlevels = 64

        features = []
        # Create HOG descriptor
        hog = cv2.HOGDescriptor(win_size, block_size, block_stride, cell_size, nbins, deriv_aperture, win_sigma, histogram_norm_type, l2_hys_threshold, gamma_correction, nlevels)
        org_h, org_w = img.shape[:2]
        grid_size = 16

        # Extract HOG features from overlapping regions of the image
        for y in range(0, org_h - win_size[1] + 1, grid_size):
            for x in range(0, org_w - win_size[0] + 1, grid_size):
                # Extract a region of keypts for feature extraction
                region_of_keypts = img[y:y + win_size[1], x:x+win_size[0]]

                # Compute features
                hog_features = hog.compute(region_of_keypts).flatten()
                if len(hog_features) > 0:
                    features.append(hog_features)
        features = np.array(features, dtype = np.float32)
        return features



        # return np.zeros((1500, 36), dtype=np.float32)
        # `.shape[0]` do not have to be (and may not) 1500,
        # but `.shape[1]` should be 36.

    elif feature == 'SIFT':

        # Your code here. You should also change the return value.
        keypts = []
        # Create a list to store keypoints
        sift = cv2.SIFT_create()
        org_h, org_w = img.shape[:2]
        grid_size = 20

        # Generate keypoints at regular intervals in the image
        for x in range(0, org_w, grid_size):
            for y in range(0,org_h, grid_size):
                keypts.append(cv2.KeyPoint(x, y, grid_size))

        # Compute SIFT features and keypoints
        _, features = sift.compute(img, keypts)
        return features
